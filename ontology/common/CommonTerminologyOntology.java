// file: CommonTerminologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontology.common;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: CommonTerminologyOntology.java
 * @author ontology bean generator
 * @version 2009/09/29, 11:00:34
 */
public class CommonTerminologyOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -4182418339071425982L;

  //NAME
  public static final String ONTOLOGY_NAME = "CommonTerminology";
  // The singleton instance of this ontology
  private static Ontology theInstance = new CommonTerminologyOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String MSHEURISTICDESCRIPTOR_VALUE="value";
    public static final String MSHEURISTICDESCRIPTOR="MSHeuristicDescriptor";
    public static final String SSHEURISTICDESCRIPTOR_VALUE="value";
    public static final String SSHEURISTICDESCRIPTOR="SSHeuristicDescriptor";
    public static final String QUALITATIVEHEURISTICDESCRIPTOR="QualitativeHeuristicDescriptor";
    public static final String HEURISTICDESCRIPTOR="HeuristicDescriptor";
    public static final String DESCRIPTION_DESCRIPTORS="descriptors";
    public static final String DESCRIPTION="Description";
    public static final String RVHEURISTICDESCRIPTOR_VALUE="value";
    public static final String RVHEURISTICDESCRIPTOR="RVHeuristicDescriptor";
    public static final String SVHEURISTICDESCRIPTOR_VALUE="value";
    public static final String SVHEURISTICDESCRIPTOR="SVHeuristicDescriptor";
    public static final String QUANTITATIVEHEURISTICDESCRIPTOR="QuantitativeHeuristicDescriptor";
    public static final String SSCHARACTERDESCRIPTOR_VALUE="value";
    public static final String SSCHARACTERDESCRIPTOR="SSCharacterDescriptor";
    public static final String QUALITATIVECHARACTERDESCRIPTOR="QualitativeCharacterDescriptor";
    public static final String CHARACTERDESCRIPTOR="CharacterDescriptor";
    public static final String RANGEVALUE_UPPERBOUND="upperBound";
    public static final String RANGEVALUE_LOWERBOUND="lowerBound";
    public static final String RANGEVALUE="RangeValue";
    public static final String RVCHARACTERDESCRIPTOR_VALUE="value";
    public static final String RVCHARACTERDESCRIPTOR="RVCharacterDescriptor";
    public static final String SVCHARACTERDESCRIPTOR_VALUE="value";
    public static final String SVCHARACTERDESCRIPTOR="SVCharacterDescriptor";
    public static final String QUANTITATIVECHARACTERDESCRIPTOR="QuantitativeCharacterDescriptor";
    public static final String MSCHARACTERDESCRIPTOR_VALUE="value";
    public static final String MSCHARACTERDESCRIPTOR="MSCharacterDescriptor";
    public static final String SINGLEVALUE_VALUE="value";
    public static final String SINGLEVALUE="SingleValue";
    public static final String VALUE_MEASURINGUNIT="measuringUnit";    
    public static final String VALUE="Value";
    public static final String DESCRIPTOR_ATTRIBUTE="attribute";
    public static final String DESCRIPTOR_STRUCTURE="structure";
    public static final String DESCRIPTOR="Descriptor";
    public static final String DESCRIBES="Describes";
    public static final String OWNS="Owns";
    public static final String DESCRIBEDBY="DescribedBy";
    public static final String APPLIESTO="ApliesTo";
    public static final String DESCRIPTOR_SCORE="score";
    public static final String APPLIESTO_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String APPLIESTO_ATTRIBUTE="attribute";
    public static final String OWNS_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String OWNS_ATTRIBUTE="attribute";
    public static final String DESCRIBES_ATTRIBUTE="attribute";
    public static final String DESCRIBES_SCORE="score";
    public static final String DESCRIBEDBY_SCORE="score";
    public static final String DESCRIBEDBY_ATTRIBUTE="attribute";
    public static final String ISDESCRIPTIVEELEMENT_DESCRIPTIVEELEMENT="descriptiveElement";
    public static final String ISDESCRIPTIVEELEMENT="IsDescriptiveElement";



    
  /**
   * Constructor
  */
  private CommonTerminologyOntology(){
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema descriptorSchema = new ConceptSchema(DESCRIPTOR);
    add(descriptorSchema, Class.forName("ontology.common.Descriptor"));
    ConceptSchema valueSchema = new ConceptSchema(VALUE);
    add(valueSchema, Class.forName("ontology.common.Value"));
    ConceptSchema singleValueSchema = new ConceptSchema(SINGLEVALUE);
    add(singleValueSchema, Class.forName("ontology.common.SingleValue"));
    ConceptSchema msCharacterDescriptorSchema = new ConceptSchema(MSCHARACTERDESCRIPTOR);
    add(msCharacterDescriptorSchema, Class.forName("ontology.common.MSCharacterDescriptor"));
    ConceptSchema quantitativeCharacterDescriptorSchema = new ConceptSchema(QUANTITATIVECHARACTERDESCRIPTOR);
    add(quantitativeCharacterDescriptorSchema, Class.forName("ontology.common.QuantitativeCharacterDescriptor"));
    ConceptSchema svCharacterDescriptorSchema = new ConceptSchema(SVCHARACTERDESCRIPTOR);
    add(svCharacterDescriptorSchema, Class.forName("ontology.common.SVCharacterDescriptor"));
    ConceptSchema rvCharacterDescriptorSchema = new ConceptSchema(RVCHARACTERDESCRIPTOR);
    add(rvCharacterDescriptorSchema, Class.forName("ontology.common.RVCharacterDescriptor"));
    ConceptSchema rangeValueSchema = new ConceptSchema(RANGEVALUE);
    add(rangeValueSchema, Class.forName("ontology.common.RangeValue"));
    ConceptSchema characterDescriptorSchema = new ConceptSchema(CHARACTERDESCRIPTOR);
    add(characterDescriptorSchema, Class.forName("ontology.common.CharacterDescriptor"));
    ConceptSchema qualitativeCharacterDescriptorSchema = new ConceptSchema(QUALITATIVECHARACTERDESCRIPTOR);
    add(qualitativeCharacterDescriptorSchema, Class.forName("ontology.common.QualitativeCharacterDescriptor"));
    ConceptSchema ssCharacterDescriptorSchema = new ConceptSchema(SSCHARACTERDESCRIPTOR);
    add(ssCharacterDescriptorSchema, Class.forName("ontology.common.SSCharacterDescriptor"));
    ConceptSchema quantitativeHeuristicDescriptorSchema = new ConceptSchema(QUANTITATIVEHEURISTICDESCRIPTOR);
    add(quantitativeHeuristicDescriptorSchema, Class.forName("ontology.common.QuantitativeHeuristicDescriptor"));
    ConceptSchema svHeuristicDescriptorSchema = new ConceptSchema(SVHEURISTICDESCRIPTOR);
    add(svHeuristicDescriptorSchema, Class.forName("ontology.common.SVHeuristicDescriptor"));
    ConceptSchema rvHeuristicDescriptorSchema = new ConceptSchema(RVHEURISTICDESCRIPTOR);
    add(rvHeuristicDescriptorSchema, Class.forName("ontology.common.RVHeuristicDescriptor"));
    ConceptSchema descriptionSchema = new ConceptSchema(DESCRIPTION);
    add(descriptionSchema, Class.forName("ontology.common.Description"));
    ConceptSchema heuristicDescriptorSchema = new ConceptSchema(HEURISTICDESCRIPTOR);
    add(heuristicDescriptorSchema, Class.forName("ontology.common.HeuristicDescriptor"));
    ConceptSchema qualitativeHeuristicDescriptorSchema = new ConceptSchema(QUALITATIVEHEURISTICDESCRIPTOR);
    add(qualitativeHeuristicDescriptorSchema, Class.forName("ontology.common.QualitativeHeuristicDescriptor"));
    ConceptSchema ssHeuristicDescriptorSchema = new ConceptSchema(SSHEURISTICDESCRIPTOR);
    add(ssHeuristicDescriptorSchema, Class.forName("ontology.common.SSHeuristicDescriptor"));
    ConceptSchema msHeuristicDescriptorSchema = new ConceptSchema(MSHEURISTICDESCRIPTOR);
    add(msHeuristicDescriptorSchema, Class.forName("ontology.common.MSHeuristicDescriptor"));

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema describesSchema = new PredicateSchema(DESCRIBES);
    add(describesSchema, Class.forName("ontology.common.Describes"));
    PredicateSchema describedBySchema = new PredicateSchema(DESCRIBEDBY);
    add(describedBySchema, Class.forName("ontology.common.DescribedBy"));
    PredicateSchema ownsSchema = new PredicateSchema(OWNS);
    add(ownsSchema, Class.forName("ontology.common.Owns"));
    PredicateSchema appliesToSchema = new PredicateSchema(APPLIESTO);
    add(appliesToSchema, Class.forName("ontology.common.ApliesTo"));
    PredicateSchema isDescriptiveElementSchema = new PredicateSchema(ISDESCRIPTIVEELEMENT);
    add(isDescriptiveElementSchema, Class.forName("ontology.common.IsDescriptiveElement"));

    // adding fields
    descriptorSchema.add(DESCRIPTOR_STRUCTURE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    descriptorSchema.add(DESCRIPTOR_ATTRIBUTE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    svCharacterDescriptorSchema.add(SVCHARACTERDESCRIPTOR_VALUE, singleValueSchema, ObjectSchema.MANDATORY);
    rvCharacterDescriptorSchema.add(RVCHARACTERDESCRIPTOR_VALUE, rangeValueSchema, ObjectSchema.MANDATORY);
    ssCharacterDescriptorSchema.add(SSCHARACTERDESCRIPTOR_VALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    msCharacterDescriptorSchema.add(MSCHARACTERDESCRIPTOR_VALUE, (TermSchema)getSchema(BasicOntology.STRING), 2, ObjectSchema.UNLIMITED);
    svHeuristicDescriptorSchema.add(SVHEURISTICDESCRIPTOR_VALUE, singleValueSchema, ObjectSchema.MANDATORY);
    rvHeuristicDescriptorSchema.add(RVHEURISTICDESCRIPTOR_VALUE, rangeValueSchema, ObjectSchema.MANDATORY);
    ssHeuristicDescriptorSchema.add(SSHEURISTICDESCRIPTOR_VALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    msHeuristicDescriptorSchema.add(MSHEURISTICDESCRIPTOR_VALUE, (TermSchema)getSchema(BasicOntology.STRING), 2, ObjectSchema.UNLIMITED);
    valueSchema.add(VALUE_MEASURINGUNIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    singleValueSchema.add(SINGLEVALUE_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    rangeValueSchema.add(RANGEVALUE_LOWERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    rangeValueSchema.add(RANGEVALUE_UPPERBOUND, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    descriptionSchema.add(DESCRIPTION_DESCRIPTORS, descriptorSchema, 0, ObjectSchema.UNLIMITED);
    isDescriptiveElementSchema.add(ISDESCRIPTIVEELEMENT_DESCRIPTIVEELEMENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    ownsSchema.add(OWNS_ATTRIBUTE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    ownsSchema.add(OWNS_DESCRIPTIVEELEMENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    describesSchema.add(DESCRIBES_SCORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    describesSchema.add(DESCRIBES_ATTRIBUTE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    describedBySchema.add(DESCRIBEDBY_SCORE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    describedBySchema.add(DESCRIBEDBY_ATTRIBUTE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    appliesToSchema.add(APPLIESTO_ATTRIBUTE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    appliesToSchema.add(APPLIESTO_DESCRIPTIVEELEMENT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    singleValueSchema.addSuperSchema(valueSchema);
    msCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    quantitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    svCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);
    rvCharacterDescriptorSchema.addSuperSchema(quantitativeCharacterDescriptorSchema);
    rangeValueSchema.addSuperSchema(valueSchema);
    characterDescriptorSchema.addSuperSchema(descriptorSchema);
    qualitativeCharacterDescriptorSchema.addSuperSchema(characterDescriptorSchema);
    ssCharacterDescriptorSchema.addSuperSchema(qualitativeCharacterDescriptorSchema);
    quantitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    svHeuristicDescriptorSchema.addSuperSchema(quantitativeHeuristicDescriptorSchema);
    rvHeuristicDescriptorSchema.addSuperSchema(quantitativeHeuristicDescriptorSchema);
    heuristicDescriptorSchema.addSuperSchema(descriptorSchema);
    qualitativeHeuristicDescriptorSchema.addSuperSchema(heuristicDescriptorSchema);
    ssHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);
    msHeuristicDescriptorSchema.addSuperSchema(qualitativeHeuristicDescriptorSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
